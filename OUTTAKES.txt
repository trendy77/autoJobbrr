
"oauth2": {
  "client_id": "145764425198-6ujjcoj5ogpvkv2femq14r0ensdnvq34.apps.googleusercontent.com",
  "scopes": ["https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/documents",
    "https://www.googleapis.com/auth/drive",
    "https://www.googleapis.com/auth/script.send_mail"
  ]
},
"key": "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCg+Zt9gZqUUvQnmwMNDAdYCM2dIDInkgd7QbjddBPde9YeRhUUhWnwxyWzu2AWjFgTVdMHreTvRVFgl2oMoBeBE2jtmIxn2QA0T6Fam+BwqEPvAbCS6sncT4gwkbAgZGMzKtLopKID/DTuabxutj4q/P4Xdt3Uh9k63/cSeEsJ1q+cW8gPkk+3cgNG6YHJ7WGtL6TAV4nyOtu4QLsDmw4EQUn/WypOWirlCM0aHiKifxe93Wg7zM1R6Oy52G+htYdlmMPitEuJZBY8B2jccy4+xsGClkBLC2fyW3QtqVDU8ahfhWAFW6tglH6c5eUsYuwT6IMuq7j/85nWGfpPGI9PAgMBAAECggEADKKK6db6Yxn/v/wSyTtgeDB4sxSL2z9DBxGpiPhLdt75d3bYwLuYDSYUd38Fk7+ASkQ6RCgKCB3QvVwlHsiSD7eOTNfkbWJC+dgmOg5yF2Wdr2zahy2WmoxDjExjHqfCgYmi9E+3x8hL/0qdV7NGPemNqBnUX5IqIszhf7mhaiwnzWRyJWNT1ljOeCKHv9VRDmnx0TgZaIlaTxZqoku50Ucb06VvIvAck8nq7oCDFsywcT5jyFfnIYptHVaiY3YpVGL5djDHQUreVbCvrOZegWDAuVRawX2mYWdQ5YYbbN3XuNaoZ5ZFdYQdr+AEdS3t+oMYSXR8pRywzkZYLXx6wQKBgQDON/7wkO9cvgCrZF6NvUtpLHq+GmtR21MUIjC+Q9EzSdV7aRijAIkkWDzyh19ipCWMnyMaPsPu/uWn7WT1bRFO1B/drHJ+VRyMfp26WOuwChcRwESNtTFiap6w2vy5oq5gSJ+MFWWwEzvF6REovpBct0dzad2nbfFMlbOarHADJQKBgQDH1Z6Oi4CmDR5Ksx146IxtXlFbJNT/H+zQUr3i1cR5VaWuM3W/0gjJ1uyQf9yH5BWAEz1wSnzAZHQB7INqkvjI9sg8Jp5LtStKAryf5yj3QETh0f3i3eTHEgEgpL1D1qEDRycPWLxmNi0qXr6fgTZVnEbxrquGisavcWmiurZ4YwKBgFJ47oqDTFdI3bet4mrJQ7mCQmx44GbSUj2BFwFg2e+rHafHdkTqV+6jI2zTWwB2KVY95qn+ZBnW8z3foTrOLdfa2gurhfakT1CY6re2DDxRLLy6qjAKQP/dKC4OxnfvadGz+arqe8qZRpR2C5jB7bZGzlqIAk+Nlq1MSZIYWIvJAoGBAIh9nQXpvN4uGaGWA6xg0gGlqVXiq2TyjlKgITh9H+xsFnUMiwGQ2RXbqcrsullK7XCEM7Ot/NWAB0iFHiG97xV8kbmb+wTk4oNzqRhi0DVI/YNsZcf+HVPnNUPxoaBjSaiugbxWtJ/voxvMiNDzdYQ18LMExf1oblrI0QkoFJfXAoGBAJF4+yg+srsZm3Z/7L2E3TngynRfML7i0Gchrbt6CNQ+AFTUKA6hECh2DNzSC077KHp5eIqHdfBA1yYZ4MJXms9x+1CTmg7NcC/xmSa+S9PjsJXBfbuCfqR/b3RCCf3HOtMJzuZuGW9toS15nCDPbSZgQxNs2R0A8iQUI7ttUsf1"
}


'











      <div class="col s12 m6">
          <a href="#" id="go" class="btn-medium">GO!</a>
      </div>
      <div class="col s12 m6">
          <a href="#" id="reset" class="btn-medium">Reset</a>
      </div>
  </div>
  <div class="row">
      <div class="col s6 m3 l2">
          <button id="signin" class="btn-medium">SignIn</button>
      </div>
      <div class="col s6 m3 l2">
          <button id="revoke" class="btn-medium" disabled>Logout</button>
      </div>
      <div class="col s6 m3 l2">
          <button id="showIds" class="btn-medium">Options</button>
      </div>
      <div class="col s2 m1">
          <button id="returnTo" class="btn-medium"><a class="material-Icons">close</a></button>
      </div>
  </div>
</div>'


/**
* Get users access_token.
*
* @param {object} options
*   @value {boolean} interactive - If user is not authorized ext, should auth UI be displayed.
*   @value {function} callback - Async function to receive getAuthToken result.
*/
function getAuthToken(options) {
 chrome.identity.getAuthToken({ 'interactive': options.interactive }, options.callback);
}
/**
* Get users access_token in background with now UI prompts.
*/
function getAuthTokenSilent() {
 getAuthToken({
   'interactive': false,
   'callback': getAuthTokenCallback,
 });
}
/**
* Get users access_token or show authorize UI if access has not been granted.
*/
function getAuthTokenInteractive() {
 getAuthToken({
   'interactive': true,
   'callback': getAuthTokenCallback,
 });
}
/**
* Handle response from authorization server.
*
* @param {string} token - Google access_token to authenticate request with.
*/
function getAuthTokenCallback(token) {
 // Catch chrome error if user is not authorized.
 if (chrome.runtime.lastError) {
   sampleSupport.log('No token aquired');
   changeState(STATE_START);
 } else {
   sampleSupport.log('Token acquired');
   changeState(STATE_AUTHTOKEN_ACQUIRED);
 }
}

function sendDataToExecutionAPIData() {
disableButton(gobutton);
gobutton.className = 'loading';
getAuthToken({
'interactive': false,
'callback': sendDataToExecutionAPICallbackData,
});
}

/**
* Calling the Execution API script callback.
* @param {string} token - Google access_token to authenticate request with.
*/
function sendDataToExecutionAPICallbackData(token) {
 sampleSupport.log('Sending data to Execution API script');
 post({	'url': 'https://script.googleapis.com/v1/scripts/' + SCRIPT_ID + ':run',
     'callback': executionAPIResponseData,
     'token': token,
     'request': {'function': 'process1',
           'parameters': {JSON.parse(theVals)}}
   });
}

function executionAPIResponseData(response){
 sampleSupport.log(response);
 enableButton(gobutton);
 xhr_button.classList.remove('loading');
 var info;
 if (response.response.result.status == 'ok'){
   info = 'Cover Letter is here: <a href="'+response.response.result.coverletter+'" target="_blank"><strong>.';
 } else {
   info = 'Error...';
 }
 exec_result.innerHTML = info;
}

/**
* Revoking the access token.
*/
function revokeToken() {
 exec_result.innerHTML='';
 getAuthToken({
   'interactive': false,
   'callback': revokeAuthTokenCallback,
 });
}
/**
* Revoking the access token callback
*/
function revokeAuthTokenCallback(current_token) {
 if (!chrome.runtime.lastError) {

   // Remove the local cached token
   chrome.identity.removeCachedAuthToken({ token: current_token }, function() {});

   // Make a request to revoke token in the server
   var xhr = new XMLHttpRequest();
   xhr.open('GET', 'https://accounts.google.com/o/oauth2/revoke?token=' +
        current_token);
   xhr.send();

   // Update the user interface accordingly
   changeState(STATE_START);
   sampleSupport.log('Token revoked and removed from cache. '+
           'Check chrome://identity-internals to confirm.');
 }
}

/**
* Make an authenticated HTTP POST request.
*
* @param {object} options
*   @value {string} url - URL to make the request to. Must be whitelisted in manifest.json
*   @value {object} request - Execution API request object
*   @value {string} token - Google access_token to authenticate request with.
*   @value {function} callback - Function to receive response.
*/
function openOptions(){
chrome.runtime.openOptionsPage();
}

function post(options) {
 var xhr = new XMLHttpRequest();
 xhr.onreadystatechange = function() {
   if (xhr.readyState === 4 && xhr.status === 200) {
     // JSON response assumed. Other APIs may have different responses.
     options.callback(JSON.parse(xhr.responseText));
   } else if(xhr.readyState === 4 && xhr.status !== 200) {
     sampleSupport.log('post', xhr.readyState, xhr.status, xhr.responseText);
   }
 };
 xhr.open('POST', options.url, true);
 xhr.setRequestHeader('Authorization', 'Bearer ' + options.token);
 xhr.send(JSON.stringify(options.request));
}
return {
 onload: function () {
theFields[0].value = document.querySelector('#tit');
theFields[1].value = document.querySelector('#employ');
theFields[2].value = document.querySelector('#cont');
theFields[3].value = document.querySelector('#uspi');
theFields[4].value = document.querySelector('#uspii');
theFields[5].value = document.querySelector('#uspiii');
   gobutton = document.querySelector('#gobutton');
   gobutton.addEventListener('click', sendDataToExecutionAPIData.bind(gobutton, true));
   optsButton.addEventListener('click', openOptions.bind(optsButton, true));
   var jobTitle = document.querySelector('#tit');
   jobTitle.addEventListener('change', 'process');
   var company = document.querySelector('#comp');
   company.addEventListener('change', 'process');
   var contact = document.querySelector('#conta');
   contact.addEventListener('change', 'process');
   exec_result = document.querySelector('#exec_result')
   getAuthTokenSilent();
 }
};
})();

window.onload = executionAPIExample.onload;
>>>>>>> master

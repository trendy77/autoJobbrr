"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
var fs = require("fs");
var path = require("path");
var _ = require("lodash");
function buildDepTree(targetFileRaw, lockFileRaw, options) {
    return __awaiter(this, void 0, void 0, function () {
        var lockFile, targetFile, depTree, topLevelDeps;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    lockFile = JSON.parse(lockFileRaw);
                    targetFile = JSON.parse(targetFileRaw);
                    if (!targetFile.dependencies) {
                        throw new Error("No 'dependencies' property in package.json");
                    }
                    if (!lockFile.dependencies) {
                        throw new Error("No 'dependencies' property in package-lock.json");
                    }
                    depTree = {
                        dependencies: {},
                        name: targetFile.name || undefined,
                        version: targetFile.version || undefined,
                    };
                    topLevelDeps = Object.keys(targetFile.dependencies);
                    return [4 /*yield*/, Promise.all(topLevelDeps.map(function (dep) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = depTree.dependencies;
                                        _b = dep;
                                        return [4 /*yield*/, buildSubTreeRecursive(dep, [], lockFile)];
                                    case 1:
                                        _a[_b] = _c.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }))];
                case 1:
                    _a.sent();
                    return [2 /*return*/, depTree];
            }
        });
    });
}
exports.buildDepTree = buildDepTree;
function buildSubTreeRecursive(dep, depKeys, lockFile) {
    return __awaiter(this, void 0, void 0, function () {
        var depSubTree, depPath, deps, newDeps;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    depSubTree = {
                        dependencies: {},
                        name: dep,
                        version: undefined,
                    };
                    depPath = getDepPath(depKeys);
                    deps = _.get(lockFile, depPath);
                    if (!(deps && deps[dep])) return [3 /*break*/, 2];
                    // update the tree
                    depSubTree.version = deps[dep].version;
                    newDeps = deps[dep].requires ? Object.keys(deps[dep].requires) : [];
                    return [4 /*yield*/, Promise.all(newDeps.map(function (subDep) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = depSubTree.dependencies;
                                        _b = subDep;
                                        return [4 /*yield*/, buildSubTreeRecursive(subDep, depKeys.concat([dep]), lockFile)];
                                    case 1:
                                        _a[_b] = _c.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }))];
                case 1:
                    _a.sent();
                    return [2 /*return*/, depSubTree];
                case 2:
                    // tree was walked to the root and dependency was not found
                    if (!depKeys.length) {
                        throw new Error("Dependency " + dep + " was not found in package-lock.json.\n        Your package.json and package-lock.json are probably out of sync.\n        Please run npm install and try to parse the log again.");
                    }
                    // dependency was not found on a current path, remove last key (move closer to the root) and try again
                    return [2 /*return*/, buildSubTreeRecursive(dep, depKeys.slice(0, -1), lockFile)];
            }
        });
    });
}
function getDepPath(depKeys) {
    var depPath = depKeys.reduce(function (acc, key) {
        return acc.concat([key, 'dependencies']);
    }, ['dependencies']);
    return depPath;
}
function buildDepTreeFromFiles(root, targetFilePath, lockFilePath, options) {
    if (!root || !lockFilePath || !lockFilePath) {
        throw new Error('Missing required parameters for parseLockFile()');
    }
    var targetFileFullPath = path.resolve(root, targetFilePath);
    var lockFileFullPath = path.resolve(root, lockFilePath);
    if (!fs.existsSync(targetFileFullPath)) {
        throw new Error("Target file package.json not found at location: " + targetFileFullPath);
    }
    if (!fs.existsSync(lockFileFullPath)) {
        throw new Error("LockFile package-lock.json not found at location: " + lockFileFullPath);
    }
    var targetFile = fs.readFileSync(targetFileFullPath);
    var lockFile = fs.readFileSync(lockFileFullPath);
    return buildDepTree(targetFile, lockFile, options);
}
exports.buildDepTreeFromFiles = buildDepTreeFromFiles;
//# sourceMappingURL=index.js.map